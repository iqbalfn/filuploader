{"version":3,"file":"fileuploader.js","sources":["../../src/js/fileuploader.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * FileUploader (v0.1.0): fileuploader.js\n * Licensed under MIT (https://github.com/iqbalfn/fileuploader/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass FileUploader {\n    constructor(options) {\n        this._queries  = options.queries    || {}\n        this._fields   = options.fields     || {}\n        this._files    = options.files      || {}\n        this._headers  = options.headers    || {}\n        this._url      = options.url\n        this._response = null\n        this._xhr      = null\n        this._chunks    = null\n        // {\n        //    chunk::int  Chunk index\n        //    chunks::int  Chunk total\n        //    options::obj {\n        //        minSize::int  Minimum size of file to chunk the upload\n        //        chunkSize:int  Each chunk file size to upload\n        //        test::func  Function to call to test chunk upload\n        //        after::func  Function to call right after last chunk\n        //        before::func  Function to call before the first chunk\n        //    }\n        // }\n\n        if(!Object.keys(this._files).length)\n            throw 'No file provided'\n\n        this._registerEvents(options)\n        this._buildUrl()\n        this._parseChunkOption(options)\n    }\n\n    // events callback\n    onChankUploaded(up, xhr, res, cb){ cb(true) }\n    onComplete(){}\n    onError(){}\n    onProgress(){}\n    onStart(){}\n    onSuccess(){}\n\n    // public\n\n    // actions\n\n    getResponse(){\n        return this._response\n    }\n\n    send(){\n        if(!this._chunks)\n            return this._sendSingle()\n        \n        this._chunks.options.before(this, cont => {\n            this._sendChunks()\n        })\n    }\n\n    // setter & adder\n    addField(name, value){\n        this._fields[name] = value\n    }\n\n    addFile(name, value){\n        this._files[name] = value\n    }\n\n    addHeader(name, value){\n        this._headers[name] = value\n    }\n\n    addQuery(name, value){\n        this._queries[name] = value\n    }\n\n    setUrl(url){\n        this._url = url\n    }\n\n    // getter\n    getUrl(){\n        return this._url\n    }\n\n    getField(name){\n        return this._fields[name]\n    }\n\n    getFields(){\n        return this._fields\n    }\n\n    getFile(name){\n        return this._files[name]\n    }\n\n    getFiles(){\n        return this._files\n    }\n\n    getHeader(name){\n        return this._headers[name]\n    }\n\n    getHeaders(){\n        return this._headers\n    }\n\n    getQuery(name){\n        return this._queries[name]\n    }\n\n    getQueries(){\n        return this._queries\n    }\n\n    // private\n\n    _buildUrl(){\n        let queries = []\n        let usign   = this._url.includes('?') ? '&' : '?'\n        for(let k in this._queries)\n            queries.push( this._qs(k) + '=' + this._qs(this._queries[k]))\n\n        if(queries.length)\n            this._url+= usign + queries\n    }\n\n    _parseChunkOption(options){\n        if(!options.chunks)\n            return\n\n        let file      = null\n        let config    = {}\n        let useChunk  = false\n        let defs   = {\n            chunkSize : 200000,\n            minSize   : 500000,\n            after(p,r,cb){ cb(r) },\n            before(up,cb){ cb(true) },\n            test(){ return true }\n        }\n\n        for(let k in defs)\n            config[k] = options.chunks[k] || defs[k]\n\n        for(let k in this._files){\n            file = this._files[k]\n\n            if(file.size < config.minSize)\n                continue\n\n            let proc = config.test(this, file, config)\n            if(!proc)\n                continue\n\n            useChunk = true\n            break\n        }\n\n        if(useChunk && Object.keys(this._files).length > 1)\n            throw 'Multiple file is not supported for chunk upload'\n\n        this._chunks = {\n            chunk   : 0,\n            chunks  : Math.ceil( file.size / config.chunkSize ),\n            options : config\n        }\n    }\n\n    _qs(str){\n        return encodeURIComponent(str)\n    }\n\n    _registerEvents(options){\n        let events = ['onChankUploaded', 'onComplete', 'onError', 'onProgress', 'onSuccess', 'onStart']\n        events.forEach(i => {\n            if(options[i])\n                this[i] = options[i]\n        })\n    }\n\n    _sendSingle(){\n        this.onStart(this)\n\n        this._upload(this._files, this._fields, (err,res) => {\n            this.onProgress(this, 100)\n            this.onComplete(this, this._xhr)\n            if(err)\n                return this.onError(this, this._xhr)\n            this.onSuccess(this, this._xhr, res)\n        })\n    }\n\n    _sendChunks(){\n        let file\n        let fkey\n        for(let k in this._files){\n            file = this._files[k]\n            fkey = k\n        }\n\n        let nextChunkIndex = this._chunks.chunk + 1\n\n        let config = this._chunks\n        let opts   = config.options\n\n        if(config.chunk)\n            this.onStart(this)\n\n        let chunkStart = config.chunk * opts.chunkSize\n        let chunkEnd   = chunkStart + opts.chunkSize\n        if(chunkEnd > file.size)\n            chunkEnd = file.size\n\n        let chunkFile  = file.slice( chunkStart, chunkEnd )\n        if(!chunkFile.size){\n            this.onComplete(this, this._xhr)\n            let res\n\n            try{\n                res = JSON.parse(this._response)\n            }catch(e){\n                res = this._response\n            }\n\n            return this._chunks.options.after(this, res, r => {\n                this.onSuccess(this, this._xhr, r)\n            })\n        }\n\n        let chunkFields    = this._fields\n        chunkFields.chunk  = this._chunks.chunk\n        chunkFields.chunks = this._chunks.chunks\n\n        let chunkProgress  = Math.round(nextChunkIndex / this._chunks.chunks * 100)\n\n        this._chunks.chunk = nextChunkIndex\n        this._upload({fkey:chunkFile}, chunkFields, (err,res) => {\n            this.onProgress(this, chunkProgress)\n            \n            if(err)\n                return this.onError(this, this._xhr)\n\n            this.onChankUploaded(this, this._xhr, res, next => {\n                if(next === true)\n                    return setTimeout(() => this._sendChunks(), 100)\n                return this.onError(this, this._xhr)\n            })\n        })\n    }\n\n    _upload(files, fields, callback){\n        let formData = new FormData(),\n            xhr      = new XMLHttpRequest();\n\n        this._xhr    = xhr\n\n        for(let field in fields)\n            formData.append(field, fields[field])\n\n        for(let field in files)\n            formData.append(field, files[field], files[field].name)\n\n        xhr.open('POST', this._url, true);\n\n        xhr.onreadystatechange = e => {\n            if(xhr.readyState != 4)\n                return\n\n            this._response = xhr.responseText\n\n            if(xhr.status != 200)\n                return callback(xhr.status, 'Invalid server response')\n\n            let res = null\n            try{\n                res = JSON.parse(xhr.responseText)\n            }catch(e){\n                res = xhr.responseText\n            }\n\n            callback(0, res)\n        }\n\n        xhr.send(formData);\n    }\n}\n\nwindow.FileUploader = FileUploader\n\nexport default FileUploader"],"names":["FileUploader","options","_queries","queries","_fields","fields","_files","files","_headers","headers","_url","url","_response","_xhr","_chunks","Object","keys","length","_registerEvents","_buildUrl","_parseChunkOption","onChankUploaded","up","xhr","res","cb","onComplete","onError","onProgress","onStart","onSuccess","getResponse","send","_sendSingle","before","cont","_sendChunks","addField","name","value","addFile","addHeader","addQuery","setUrl","getUrl","getField","getFields","getFile","getFiles","getHeader","getHeaders","getQuery","getQueries","usign","includes","k","push","_qs","chunks","file","config","useChunk","defs","chunkSize","minSize","after","p","r","test","size","proc","chunk","Math","ceil","str","encodeURIComponent","events","forEach","i","_upload","err","nextChunkIndex","opts","chunkStart","chunkEnd","chunkFile","slice","JSON","parse","e","chunkFields","chunkProgress","round","fkey","next","setTimeout","callback","formData","FormData","XMLHttpRequest","field","append","open","onreadystatechange","readyState","responseText","status","window"],"mappings":"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"}