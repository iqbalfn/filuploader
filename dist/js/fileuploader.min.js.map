{"version":3,"sources":["../../src/js/fileuploader.js"],"names":["FileUploader","options","_this","this","_queries","queries","_fields","fields","_files","files","_headers","headers","_url","url","_response","_xhr","forEach","i","onStart","onProgress","onError","onSuccess","onComplete","getResponse","send","_this2","formData","FormData","xhr","XMLHttpRequest","field","append","name","usign","includes","k","push","_qs","length","open","onreadystatechange","readyState","status","res","JSON","parse","responseText","e","addField","value","addFile","addHeader","addQuery","setUrl","getUrl","getField","getFields","getFile","getFiles","getHeader","getHeaders","getQuery","getQueries","str","encodeURIComponent","window"],"mappings":";;;;;6MAaMA,aACF,SAAAA,EAAYC,GAAS,IAAAC,EAAAC,KACjBA,KAAKC,SAAYH,EAAQI,SAAc,GACvCF,KAAKG,QAAYL,EAAQM,QAAc,GACvCJ,KAAKK,OAAYP,EAAQQ,OAAc,GACvCN,KAAKO,SAAYT,EAAQU,SAAc,GACvCR,KAAKS,KAAYX,EAAQY,IACzBV,KAAKW,UAAY,KACjBX,KAAKY,KAAY,KAGJ,CAAC,UAAW,aAAc,UAAW,YAAa,cACxDC,QAAQ,SAAAC,GACRhB,EAAQgB,KACPf,EAAKe,GAAKhB,EAAQgB,iCAK9BC,QAAA,eACAC,WAAA,eACAC,QAAA,eACAC,UAAA,eACAC,WAAA,eAMAC,YAAA,WACI,OAAOpB,KAAKW,aAGhBU,KAAA,WAAM,IAAAC,EAAAtB,KACEuB,EAAW,IAAIC,SACfC,EAAW,IAAIC,eAInB,IAAI,IAAIC,KAFR3B,KAAKY,KAAOa,EAEKzB,KAAKG,QAClBoB,EAASK,OAAOD,EAAO3B,KAAKG,QAAQwB,IAExC,IAAI,IAAIA,KAAS3B,KAAKK,OAClBkB,EAASK,OAAOD,EAAO3B,KAAKK,OAAOsB,GAAQ3B,KAAKK,OAAOsB,GAAOE,MAElE,IAAInB,EAAUV,KAAKS,KACfqB,EAAUpB,EAAIqB,SAAS,KAAO,IAAM,IACpC7B,EAAU,GACd,IAAI,IAAI8B,KAAKhC,KAAKC,SACdC,EAAQ+B,KAAMjC,KAAKkC,IAAIF,GAAK,IAAMhC,KAAKkC,IAAIlC,KAAKC,SAAS+B,KAE1D9B,EAAQiC,SACPzB,GAAMoB,EAAQ5B,GAElBuB,EAAIW,KAAK,OAAQ1B,GAAK,GAEtBe,EAAIY,mBAAqB,WAGrB,GAFAf,EAAKN,WAAWM,EAAMG,EAAIa,YAEL,GAAlBb,EAAIa,WAAP,CAGA,GAAiB,KAAdb,EAAIc,OAGH,OAFAjB,EAAKL,QAAQK,EAAMA,EAAKV,WACxBU,EAAKH,WAAWG,EAAMA,EAAKV,MAI/B,IAAI4B,EAAM,KAEV,IACIA,EAAMC,KAAKC,MAAMjB,EAAIkB,cACxB,MAAMC,GACHJ,EAAMf,EAAIkB,aAGdrB,EAAKJ,UAAUI,EAAMA,EAAKV,KAAM4B,GAChClB,EAAKH,WAAWG,EAAMA,EAAKV,QAG/Ba,EAAIJ,KAAKE,GACTvB,KAAKe,QAAQf,KAAMA,KAAKY,SAI5BiC,SAAA,SAAShB,EAAMiB,GACX9C,KAAKG,QAAQ0B,GAAQiB,KAGzBC,QAAA,SAAQlB,EAAMiB,GACV9C,KAAKK,OAAOwB,GAAQiB,KAGxBE,UAAA,SAAUnB,EAAMiB,GACZ9C,KAAKO,SAASsB,GAAQiB,KAG1BG,SAAA,SAASpB,EAAMiB,GACX9C,KAAKC,SAAS4B,GAAQiB,KAG1BI,OAAA,SAAOxC,GACHV,KAAKS,KAAOC,KAIhByC,OAAA,WACI,OAAOnD,KAAKS,QAGhB2C,SAAA,SAASvB,GACL,OAAO7B,KAAKG,QAAQ0B,MAGxBwB,UAAA,WACI,OAAOrD,KAAKG,WAGhBmD,QAAA,SAAQzB,GACJ,OAAO7B,KAAKK,OAAOwB,MAGvB0B,SAAA,WACI,OAAOvD,KAAKK,UAGhBmD,UAAA,SAAU3B,GACN,OAAO7B,KAAKO,SAASsB,MAGzB4B,WAAA,WACI,OAAOzD,KAAKO,YAGhBmD,SAAA,SAAS7B,GACL,OAAO7B,KAAKC,SAAS4B,MAGzB8B,WAAA,WACI,OAAO3D,KAAKC,YAKhBiC,IAAA,SAAI0B,GACA,OAAOC,mBAAmBD,SAIlCE,OAAOjE,aAAeA","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * FileUploader (v0.0.1): fileuploader.js\n * Licensed under MIT (https://github.com/iqbalfn/fileuploader/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass FileUploader {\n    constructor(options) {\n        this._queries  = options.queries    || {}\n        this._fields   = options.fields     || {}\n        this._files    = options.files      || {}\n        this._headers  = options.headers    || {}\n        this._url      = options.url\n        this._response = null\n        this._xhr      = null\n\n        // events\n        let events = ['onStart', 'onProgress', 'onError', 'onSuccess', 'onComplete']\n        events.forEach(i => {\n            if(options[i])\n                this[i] = options[i]\n        })\n    }\n\n    // events callback\n    onStart(){}\n    onProgress(){}\n    onError(){}\n    onSuccess(){}\n    onComplete(){}\n\n    // public\n\n    // actions\n\n    getResponse(){\n        return this._response\n    }\n\n    send(){\n        let formData = new FormData(),\n            xhr      = new XMLHttpRequest()\n\n        this._xhr = xhr\n\n        for(let field in this._fields)\n            formData.append(field, this._fields[field])\n\n        for(let field in this._files)\n            formData.append(field, this._files[field], this._files[field].name);\n\n        let url     = this._url\n        let usign   = url.includes('?') ? '&' : '?'\n        let queries = []\n        for(let k in this._queries)\n            queries.push( this._qs(k) + '=' + this._qs(this._queries[k]))\n\n        if(queries.length)\n            url+= usign + queries\n\n        xhr.open('POST', url, true);\n\n        xhr.onreadystatechange = () => {\n            this.onProgress(this, xhr.readyState)\n\n            if(xhr.readyState != 4)\n                return\n            \n            if(xhr.status != 200){\n                this.onError(this, this._xhr)\n                this.onComplete(this, this._xhr)\n                return\n            }\n\n            let res = null\n\n            try{\n                res = JSON.parse(xhr.responseText)\n            }catch(e){\n                res = xhr.responseText\n            }\n\n            this.onSuccess(this, this._xhr, res)\n            this.onComplete(this, this._xhr)\n        }\n\n        xhr.send(formData);\n        this.onStart(this, this._xhr)\n    }\n\n    // setter & adder\n    addField(name, value){\n        this._fields[name] = value\n    }\n\n    addFile(name, value){\n        this._files[name] = value\n    }\n\n    addHeader(name, value){\n        this._headers[name] = value\n    }\n\n    addQuery(name, value){\n        this._queries[name] = value\n    }\n\n    setUrl(url){\n        this._url = url\n    }\n\n    // getter\n    getUrl(){\n        return this._url\n    }\n\n    getField(name){\n        return this._fields[name]\n    }\n\n    getFields(){\n        return this._fields\n    }\n\n    getFile(name){\n        return this._files[name]\n    }\n\n    getFiles(){\n        return this._files\n    }\n\n    getHeader(name){\n        return this._headers[name]\n    }\n\n    getHeaders(){\n        return this._headers\n    }\n\n    getQuery(name){\n        return this._queries[name]\n    }\n\n    getQueries(){\n        return this._queries\n    }\n\n    // private\n\n    _qs(str){\n        return encodeURIComponent(str)\n    }\n}\n\nwindow.FileUploader = FileUploader\n\nexport default FileUploader"]}